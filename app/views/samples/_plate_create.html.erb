<div class="container">
  <%= form_with(model: @plate, url: step3_sample_bulkprepared_path) do |form| %>
    <% if @plate.errors.any? %>
      <div id="error_explanation">
        <h2><%= pluralize(@plate.errors.count, "error") %> prohibited this test from being saved:</h2>
        <ul>
          <% @plate.errors.full_messages.each do |message| %>
            <li><%= message %></li>
          <% end %>
        </ul>
      </div>
    <% end %>
    <table class="table table-striped table-bordered">
      <thead class="thead-dark">
      <tr>
        <th></th>
        <% PlateHelper.columns.each do |col| %>
          <th><%= col %></th>
        <% end %>
      </tr>
      </thead>
      <tbody>
      <% @plate.wells.sort_by{|w| w.row}.group_by {|w| w.row }.each do |row, row_wells| %>
        <tr>
          <td class="dark-cell text-center"><%= row %></td>
          <%= form.fields_for :wells, row_wells.sort_by{|w|w.column} do |builder| %>
            <td>
              <%= builder.hidden_field :row, name: '[sample_well_mapping][mappings][][row]'  %>
              <%= builder.hidden_field :row  %>
              <%= builder.hidden_field :column, name: '[sample_well_mapping][mappings][][column]'  %>
              <%= builder.hidden_field :column  %>
              <%= builder.fields_for :sample, Sample.new do |sample_builder| %>
                <%= sample_builder.text_field :id, name: '[sample_well_mapping][mappings][][id]', class:"form-control sample-assign" %>
              <% end %>
            </td>
          <% end %>
        </tr>
      <% end  %>
      </tbody>
    </table>
    <div class="actions">
      <%= form.submit "Create Plate", class: 'btn btn-primary' %>
    </div>
  <% end %>
</div>
<script>

    $(document).on('turbolinks:load', function () {

        var video = document.createElement("video");
        var canvasElement = document.getElementById("canvas");
        var canvas = canvasElement.getContext("2d");
        var loadingMessage = document.getElementById("loadingMessage");
        var outputContainer = document.getElementById("output");
        var outputData = document.getElementById("outputData");
        var cell_index = 0;

        $( ".sample-assign" ).autocomplete({
            source: function (request, response) {
                response(getRemainingSamples());
            },
        });

        function getRemainingSamples(){
            to_complete =  pending_samples.filter(x => !set_samples.includes(x.value.toString()));
            return to_complete;
        }

        function validate_plate(sampleId, success, failure){
            if(!pending_samples.map(x => x.value.toString()).includes(sampleId)){
                const err = 'You cannot process this sample ID';
                failure(err)
            }else{
                if(set_samples.includes(sampleId)){
                    const err = 'Sample has already been assigned to a well';

                    failure(err);
                }else{
                    set_samples.push(sampleId);
                    if(typeof success === 'function'){
                        success();
                    }else{
                        return
                    }

                }
            }
        }

        let pending_samples = []
        let set_samples = []
        fetch('/samples/pendingprepare.json')
            .then(res => res.json())
            .then( js => pending_samples = js.map(item => { return {
                          label: item.uid,
                          value: item.id
                      }}))

        $(".form-control").change(function(evt){
            const uid = evt.currentTarget.value;
            validate_plate(uid, null, function(err){
                evt.currentTarget.value = null;
                alert(err);
            })
        });

        function drawLine(begin, end, color) {
            canvas.beginPath();
            canvas.moveTo(begin.x, begin.y);
            canvas.lineTo(end.x, end.y);
            canvas.lineWidth = 4;
            canvas.strokeStyle = color;
            canvas.stroke();
        }

        // Use facingMode: environment to attemt to get the front camera on phones
        navigator.mediaDevices.getUserMedia({ video: { facingMode: "environment" } }).then(function(stream) {
            video.srcObject = stream;
            video.setAttribute("playsinline", true); // required to tell iOS safari we don't want fullscreen
            video.play();
            requestAnimationFrame(tick);
        });

        function tick() {
            var qr_code_read = false;
            loadingMessage.innerText = "âŒ› Loading video..."
            if (video.readyState === video.HAVE_ENOUGH_DATA) {
                loadingMessage.hidden = true;
                canvasElement.hidden = false;
                outputContainer.hidden = true;

                canvasElement.height = video.videoHeight;
                canvasElement.width = video.videoWidth;
                canvas.drawImage(video, 0, 0, canvasElement.width, canvasElement.height);
                var imageData = canvas.getImageData(0, 0, canvasElement.width, canvasElement.height);
                var code = jsQR(imageData.data, imageData.width, imageData.height, {
                    inversionAttempts: "dontInvert",
                });
                if (code) {
                    drawLine(code.location.topLeftCorner, code.location.topRightCorner, "#FF3B58");
                    drawLine(code.location.topRightCorner, code.location.bottomRightCorner, "#FF3B58");
                    drawLine(code.location.bottomRightCorner, code.location.bottomLeftCorner, "#FF3B58");
                    drawLine(code.location.bottomLeftCorner, code.location.topLeftCorner, "#FF3B58");
                    outputData.parentElement.hidden = false;
                    outputData.innerText = code.data;

                    if (code.data){
                        const uid = code.data;
                        console.log(uid);
                        new Audio('/ping.mp3').play();
                        validate_plate(uid, function (){
                            // success
                            const row = $("input.form-control:eq( " + cell_index + " )").siblings('#wells__row')[0].value;
                            const col = $("input.form-control:eq( " + cell_index + " )").siblings('#wells__col')[0].value;
                            const existingValue = $("input.form-control:eq( " + cell_index + " )").val();
                            if (existingValue && !(confirm(`${row}${col} already has a value, do you want to overwrite it?`))){
                                return;
                            }
                            $("input.form-control:eq( " + cell_index + " )").val(uid);
                            $("#wellToInsertSample").text(row + col);
                            cell_index ++;
                        }, function(err){
                            // failure
                            $("#wellToInsertSample").text(err);
                        })
                        qr_code_read = true;
                        outputContainer.hidden = false;
                    }
                } else {
                    outputData.parentElement.hidden = true;
                }
            }
            if (!qr_code_read){
                requestAnimationFrame(tick);
            }
        }

        $("#nextSampleButton").on( "click", function() {
            tick();
        });
        $(".sample-assign").on("click", function(e){
            cell_index = $('.sample-assign').index(this);
        })

    });
</script>