<div class="container">
  <br>

  <div class="row">
    <div class="col-md-6">
      <h3>1) Scan barcode</h3>
      <hr>
      <div id="loadingMessage">ðŸŽ¥ Unable to access video stream (please make sure you have a webcam enabled)</div>
      <div class="card">
        <canvas id="canvas" hidden></canvas>
      </div>      
    </div>
    <div class="col-md-6">      
      <h3>2) Insert sample into well</h3>
      <hr>
      <div id="output" class="text-center" hidden>
        <br>
        <span>Place sample:</span>
        <div class="card card-header">
          <pre id="outputData"></pre>
        </div>
        <br>
        <span>into well:</span>
        <div class="card card-header">
          <pre id="wellToInsertSample"></pre>
        </div>
        <br>
        <button id="nextSampleButton" type="button" class="btn btn-success btn-block btn-lg">Next Sample</button>
      </div>
    </div>
  </div>

  <br><br>
  <h3>Plate Status</h3>
  <hr>
  <%= form_for(:samples, url: step3_sample_bulkprepared_path) do |form| %>
    <table class="table table-hover table-bordered">
        <thead class="thead-dark text-center">
        <tr>
          <th><!-- row letter --></th>
          <% (1..12).each do |col| %>
            <th><%= col %></th>
          <% end %>
        </tr>
        </thead>
        <tbody>
          <% ('A'..'H').each do |row| %>
            <tr>
              <td class="dark-cell text-center"><%= row %></td>
              <% (1..12).each do |col| %>
                <td>
                  <%= hidden_field_tag 'wells[][row]', row  %>
                  <%= hidden_field_tag 'wells[][col]', col  %>
                  <input type="text" class="form-control sample-assign" name="wells[][uid]">
                </td>
              <% end %>
            </tr>
          <% end %>
        </tbody>
      </table>
      <div class="actions">
        <%= form.submit "Create Plate", :class => 'btn btn-primary' %>
      </div>
    <% end %>
</div>
<br><br>

<script>

  $(document).on('turbolinks:load', function () {

      var video = document.createElement("video");
      var canvasElement = document.getElementById("canvas");
      var canvas = canvasElement.getContext("2d");
      var loadingMessage = document.getElementById("loadingMessage");
      var outputContainer = document.getElementById("output");
      var outputData = document.getElementById("outputData");
      var cell_index = 0;

      $( ".sample-assign" ).autocomplete({
          source: function (request, response) {
              response(getRemainingSamples());
          },
      });

      function getRemainingSamples(){
          to_complete =  pending_samples.filter(x => !set_samples.includes(x));
          return to_complete;
      }

      function validate_plate(uid, success, failure){
          if(!pending_samples.includes(uid)){
              const err = 'You cannot process this sample ID';
              failure(err)
          }else{
              if(set_samples.includes(uid)){
                  const err = 'Sample has already been assigned to a well';

                  failure(err);
              }else{
                  set_samples.push(uid);
                  if(typeof success === 'function'){
                      success();
                  }else{
                      return
                  }

              }
          }
      }

      let pending_samples = []
      let set_samples = []
      fetch('/samples/pendingprepare.json')
          .then(res => res.json())
          .then( js => pending_samples = js.map(item => item.uid))

      $(".form-control").change(function(evt){
          const uid = evt.currentTarget.value;
          validate_plate(uid, null, function(err){
              evt.currentTarget.value = null;
              alert(err);
          })
      });

      function drawLine(begin, end, color) {
          canvas.beginPath();
          canvas.moveTo(begin.x, begin.y);
          canvas.lineTo(end.x, end.y);
          canvas.lineWidth = 4;
          canvas.strokeStyle = color;
          canvas.stroke();
      }

      // Use facingMode: environment to attemt to get the front camera on phones
      navigator.mediaDevices.getUserMedia({ video: { facingMode: "environment" } }).then(function(stream) {
          video.srcObject = stream;
          video.setAttribute("playsinline", true); // required to tell iOS safari we don't want fullscreen
          video.play();
          requestAnimationFrame(tick);
      });

      function tick() {
          var qr_code_read = false;
          loadingMessage.innerText = "âŒ› Loading video..."
          if (video.readyState === video.HAVE_ENOUGH_DATA) {
              loadingMessage.hidden = true;
              canvasElement.hidden = false;
              outputContainer.hidden = true;

              canvasElement.height = video.videoHeight;
              canvasElement.width = video.videoWidth;
              canvas.drawImage(video, 0, 0, canvasElement.width, canvasElement.height);
              var imageData = canvas.getImageData(0, 0, canvasElement.width, canvasElement.height);
              var code = jsQR(imageData.data, imageData.width, imageData.height, {
                  inversionAttempts: "dontInvert",
              });
              if (code) {
                  drawLine(code.location.topLeftCorner, code.location.topRightCorner, "#FF3B58");
                  drawLine(code.location.topRightCorner, code.location.bottomRightCorner, "#FF3B58");
                  drawLine(code.location.bottomRightCorner, code.location.bottomLeftCorner, "#FF3B58");
                  drawLine(code.location.bottomLeftCorner, code.location.topLeftCorner, "#FF3B58");
                  outputData.parentElement.hidden = false;
                  outputData.innerText = code.data;

                  if (code.data){
                      const uid = code.data;
                      console.log(uid);
                      new Audio('/ping.mp3').play();
                      validate_plate(uid, function (){
                          // success
                          const row = $("input.form-control:eq( " + cell_index + " )").siblings('#wells__row')[0].value;
                          const col = $("input.form-control:eq( " + cell_index + " )").siblings('#wells__col')[0].value;
                          const existingValue = $("input.form-control:eq( " + cell_index + " )").val();
                          if (existingValue && !(confirm(`${row}${col} already has a value, do you want to overwrite it?`))){
                            return;
                          }
                          $("input.form-control:eq( " + cell_index + " )").val(uid);                          
                          $("#wellToInsertSample").text(row + col);
                          cell_index ++;
                      }, function(err){
                          // failure
                          $("#wellToInsertSample").text(err);
                      })
                      qr_code_read = true;
                      outputContainer.hidden = false;
                  }
              } else {
                  outputData.parentElement.hidden = true;
              }
          }
          if (!qr_code_read){
              requestAnimationFrame(tick);
          }
      }

      $("#nextSampleButton").on( "click", function() {
          tick();
      });
      $(".sample-assign").on("click", function(e){
        cell_index = $('.sample-assign').index(this);
      })

  });



</script>