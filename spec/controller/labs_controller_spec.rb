 require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe LabsController, type: :controller do
  # Lab. As you add validations to Lab, be sure to
  # adjust the attributes here as well.

  before :each do
    @request.env["devise.mapping"] = Devise.mappings[:user]
    @user = create(:user, role: User.roles[:patient])
    @client = create(:client)
    Sample.with_user(@user) do
      @sample = create(:sample, client: @client)
    end
    session[:labgroup] = @client.labgroup.id
    session[:lab] = @client.labgroup.labs.first.id
    sign_in @user
  end

  let(:valid_attributes) do
    {
      name: 'testlab',
      labgroup_id: @client.labgroup.id
    }
  end

  let(:invalid_attributes) do
    {
      name: 'testlab',
      labgroup_id: nil
    }
  end

  describe "GET /index" do
    it "renders a successful response" do
      Lab.create! valid_attributes
      get :index
      expect(response).to be_successful
    end
  end

  describe "GET /show" do
    it "renders a successful response" do
      lab = Lab.create! valid_attributes
      get :show, params: {id: lab.id}
      expect(response).to be_successful
    end
  end

  describe "GET /new" do
    it "renders a successful response" do
      get :new
      expect(response).to be_successful
    end
  end

  describe "GET /edit" do
    it "render a successful response" do
      lab = Lab.create! valid_attributes
      get :edit, params: { id: lab.id }
      expect(response).to be_successful
    end
  end

  describe "POST /create" do
    context "with valid parameters" do
      it "creates a new Lab" do
        expect {
          post :create, params: { lab: valid_attributes }
        }.to change(Lab, :count).by(1)
      end

      it "redirects to the created lab" do
        post :create, params: { lab: valid_attributes }
        expect(response).to redirect_to(lab_url(Lab.last))
      end
    end

    context "with invalid parameters" do
      it "does not create a new Lab" do
        expect {
          post :create, params: { lab: invalid_attributes }
        }.to change(Lab, :count).by(0)
      end

      it "renders a successful response (i.e. to display the 'new' template)" do
        post :create, params: { lab: invalid_attributes }
        expect(response).to be_successful
      end
    end
  end

  describe "PATCH /update" do
    context "with valid parameters" do
      let(:new_attributes) do {
        name: "newname"
      }
      end

      it "updates the requested lab" do
        lab = Lab.create! valid_attributes
        patch :update, params: {id: lab.id, lab: new_attributes }
        lab.reload
        expect(lab.name).to eq "newname"
      end

      it "redirects to the lab" do
        lab = Lab.create! valid_attributes
        patch :update, params: {id: lab.id, lab: new_attributes }
        lab.reload
        expect(response).to redirect_to(lab_url(lab))
      end
    end

    context "with invalid parameters" do
      it "renders a successful response (i.e. to display the 'edit' template)" do
        lab = Lab.create! valid_attributes
        patch :update, params: {id: lab.id, lab: invalid_attributes }
        expect(response).to be_successful
      end
    end
  end

  describe "DELETE /destroy" do
    it "destroys the requested lab" do
      lab = Lab.create! valid_attributes
      expect {
        delete :destroy, params: { id: lab.id }
      }.to change(Lab, :count).by(-1)
    end

    it "redirects to the labs list" do
      lab = Lab.create! valid_attributes
      delete :destroy, params: { id: lab.id }
      expect(response).to redirect_to(labs_url)
    end
  end
end
